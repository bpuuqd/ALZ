<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="alz.lesson.mapper.LessonMapper">

   <resultMap type="alz.lesson.domain.CurriculumSubjectDTO" id="subjectMap">
      <id property="subjectId" column="id"/>
      <result property="curriculumOrder" column="curriculum_order"/>
      <result property="subject" column="subject"/>
      
      <collection property="detailList" ofType="alz.lesson.domain.CurriculumDetailDTO">
         <id property="detailOrder" column="curriculum_detail_order"/>
         <result property="detail" column="detail"/>
      </collection>
   </resultMap>
   
   <select id="findCurriculumByLessonId" resultMap="subjectMap">
      select c.id, c.curriculum_order, c.subject, d.curriculum_detail_order, d.detail
		from alz_curriculum c, alz_curriculum_detail d
	   where c.id = d.curriculum_id
		 and c.lesson_id = #{id}
	order by c.curriculum_order, d.curriculum_detail_order
   </select>
   
   <select id="findTeacherByLessonId" resultType="alz.lesson.domain.TeacherDTO">
      select alz_teacher.id, alz_teacher.user_id userId, alz_teacher.nickname, alz_teacher.profile, 
         alz_teacher.sns_type snsType, alz_teacher.sns_id snsId, alz_teacher.sns_url snsUrl
        from alz_lesson, alz_teacher
       where alz_lesson.teacher_id = alz_teacher.id
         and alz_lesson.id = #{id}
   </select>
   
   <select id="findQuickReviewByLessonId" resultType="alz.lesson.domain.QuickReviewDTO">
      select alz_lesson_quickreview.user_id userId, alz_lesson_quickreview.lesson_id lessonId, 
            alz_lesson_quickreview.rate, alz_lesson_quickreview.content, alz_user.nickname
          from alz_lesson_quickreview, alz_user
         where alz_lesson_quickreview.user_id = alz_user.id
           and alz_lesson_quickreview.lesson_id = #{id}
   </select>
   
   <select id="findByLessonId" resultType="alz.lesson.domain.LessonDTO">
      select lesson.id id, lesson.teacher_id teacherId, category.id categoryId, category.main, category.sub, 
            category.name categoryName, lesson.title, lessonType.type lessonType, lessonLevel.id lessonLevelId,
            lessonLevel.lesson_level lessonLevel, lesson.min_student minStudent, lesson.max_student maxStudent, 
            lesson.current_student currentStudent, lessonState.state state, lesson.open_at openAt, lesson.close_at closeAt, 
            schedule.start_at startAt, schedule.end_at endAt, detail.detail detail
        from alz_lesson lesson, 
             alz_lesson_type lessonType, 
             alz_lesson_level lessonLevel,
             alz_lesson_state lessonState,
             alz_category category,
             alz_lesson_schedule schedule,
             alz_lesson_detail detail
       where lesson.lesson_type = lessonType.id 
         and lesson.lesson_level = lessonLevel.id
         and lesson.state = lessonState.id
         and lesson.category_id = category.id
         and lesson.id = schedule.lesson_id
         and lesson.id = detail.lesson_id
         and lesson.id = #{id}
   </select>
   
   <select id="findBasicByLessonId" resultType="alz.lesson.domain.LessonDTO">
      select lesson.id id, lesson.teacher_id teacherId, category.id categoryId, category.main, category.sub, 
            category.name categoryName, lesson.title, lessonType.type lessonType, lessonLevel.id lessonLevelId,
            lessonLevel.lesson_level lessonLevel, lesson.min_student minStudent, lesson.max_student maxStudent, 
            lesson.current_student currentStudent, lesson.state state, lesson.open_at openAt, lesson.close_at closeAt
        from alz_lesson lesson, 
             alz_lesson_type lessonType, 
             alz_lesson_level lessonLevel,
             alz_lesson_state lessonState,
             alz_category category
       where lesson.lesson_type = lessonType.id 
         and lesson.lesson_level = lessonLevel.id
         and lesson.state = lessonState.id
         and lesson.category_id = category.id
         and lesson.id = #{id}
   </select>

   <select id="findAll" resultType="alz.lesson.domain.LessonDTO">
      select lesson.id id, lesson.teacher_id teacherId, category.name categoryName, lesson.title,
          lessonType.type lessonType, lessonLevel.lesson_level lessonLevel, lesson.min_student minStudent,
          lesson.max_student maxStudent, lesson.current_student currentStudent, lessonState.state state,
            lesson.open_at openAt, lesson.close_at closeAt, schedule.start_at startAt, schedule.end_at endAt
      from alz_lesson lesson, 
           alz_lesson_type lessonType, 
           alz_lesson_level lessonLevel,
           alz_lesson_state lessonState,
             alz_category category,
             alz_lesson_schedule schedule
      where lesson.lesson_type = lessonType.id 
        and lesson.lesson_level = lessonLevel.id
        and lesson.state = lessonState.id
          and lesson.category_id = category.id
          and lesson.id = schedule.lesson_id
   </select>
   
   <select id="findTeacherByUserId" resultType="alz.lesson.domain.TeacherDTO">
      select id, user_id userId, nickname, profile, sns_type snsType, sns_id snsId, sns_url snsUrl
        from alz_teacher
       where user_id = #{userId}
   </select>
   
   <select id="lessonsByTeacherId" resultType="alz.lesson.domain.LessonDTO">
      select alz_lesson.id, alz_lesson.teacher_id teacherId, alz_lesson.title, alz_lesson.state
      from alz_lesson, alz_teacher
      where alz_lesson.teacher_id = alz_teacher.id
       and alz_lesson.teacher_id = #{teacherId}
   </select>
   
   <select id="findMainCategory" resultType="alz.lesson.domain.CategoryDTO">
      select id, main, sub, name, description, total
        from alz_category
       where sub = 0
   </select>
   
   <select id="findSubCategory" resultType="alz.lesson.domain.CategoryDTO">
      select id, main, sub, name, description, total
        from alz_category
       where sub > 0
   </select>
   
   <select id="findLessonLevel" resultType="alz.lesson.domain.CategoryDTO">
      select id, lesson_level name
        from alz_lesson_level
   </select>
   
   <select id="findLessonDetail" resultType="alz.lesson.domain.LessonDetailDTO">
      select id, lesson_id, detail
        from alz_lesson_detail
       where lesson_id = #{lessonId}
   </select>
   
   <resultMap type="alz.lesson.domain.ScheduleDTO" id="timeTableMap">
      <result property="lessonId" column="lesson_id"/>
      <result property="openAt" column="open_at"/>
      <result property="closeAt" column="close_at"/>
      
      <collection property="timeTable" ofType="alz.lesson.domain.TimeTableDTO">
      	  <result property="timeTableId" column="id"/>
	      <result property="lessonDate" column="lesson_date"/>
	      <result property="startAt" column="start_at"/>
	      <result property="endAt" column="end_at"/>
      </collection>
   </resultMap>
   
	<select id="findLessonSchedule" resultMap="timeTableMap">
		select s.lesson_id, s.id, l.open_at, l.close_at, s.lesson_date, s.start_at, s.end_at
		  from alz_lesson l, alz_lesson_schedule s
		 where l.id = s.lesson_id
		   and l.id = #{lessonId}
	</select>
   
   <insert id="insertTeacher" parameterType="alz.lesson.domain.TeacherDTO">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_teacher_seq.nextval from dual
		</selectKey>
      insert into alz_teacher
      values(#{id}, #{userId}, #{nickname}, #{profile}, #{snsType}, #{snsId}, #{snsUrl})
   </insert>
   
   <insert id="insertLesson" parameterType="alz.lesson.domain.LessonDTO" >
      <selectKey keyProperty="id" order="BEFORE" resultType="long">
         select alz_lesson_seq.nextval from dual
      </selectKey>
      insert into alz_lesson (id, teacher_id, category_Id, title, lesson_type, lesson_level,
                            min_student, max_student, open_at, close_at)
      values (#{id}, #{teacherId}, #{categoryId}, #{title}, #{lessonType}, #{lessonLevel},
             #{minStudent}, #{maxStudent}, #{openAt}, #{closeAt})
   </insert>
   
   <insert id="insertSchedule" parameterType="alz.lesson.domain.TimeTableDTO" >
      insert into alz_lesson_schedule (id, lesson_id, lesson_date, start_At, end_At)
      values (alz_lesson_schedule_seq.nextval, #{timeTableId}, #{lessonDate}, #{startAt}, #{endAt})
   </insert>
   
   <insert id="insertLessonDetail" parameterType="alz.lesson.domain.LessonDetailDTO" >
      <selectKey keyProperty="id" order="BEFORE" resultType="long">
         select alz_lesson_detail_seq.nextval from dual
      </selectKey>
      insert into alz_lesson_detail (id, lesson_id, detail)
      values (#{id}, #{lessonId}, #{detail})
   </insert>
   
   <update id="updateLesson" parameterType="alz.lesson.domain.LessonDTO">
      update alz_lesson
      set title = #{title},
          lesson_type = #{lessonType},
          lesson_level = #{lessonLevel},
          min_student = #{minStudent},
          max_student = #{maxStudent},
          open_at = #{openAt},
          close_at = #{closeAt},
          state = 1
      WHERE id = #{id}
   </update>
   
   <update id="updateTeacher" parameterType="alz.lesson.domain.TeacherDTO">
      update alz_teacher
      set    nickname = #{nickname},
            profile = #{profile},
            sns_type = #{snsType},
            sns_id = #{snsId},
            sns_url = #{snsUrl}
      where  id = #{id}
   </update>
   
   <update id="updateLessonDetail" parameterType="alz.lesson.domain.LessonDetailDTO">
      update alz_lesson_detail
      	 set detail = #{detail}
      where  id = #{id}
   </update>
   
   <delete id="deleteById">
      DELETE FROM ALZ_LESSON WHERE id = #{id}
   </delete>
   
   <delete id="deleteSchedule">
      delete from alz_lesson_schedule 
      where lesson_id = #{lessonId}
   </delete>

</mapper>