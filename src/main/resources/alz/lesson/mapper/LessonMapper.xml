<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="alz.lesson.mapper.LessonMapper">

	<resultMap type="alz.lesson.domain.CurriculumSubjectDTO" id="subjectMap">
		<id property="subjectId" column="id"/>
		<result property="curriculumOrder" column="curriculum_order"/>
		<result property="subject" column="subject"/>
		
		<collection property="detailList" ofType="alz.lesson.domain.CurriculumDetailDTO">
			<id property="detailOrder" column="curriculum_detail_order"/>
			<result property="detail" column="detail"/>
		</collection>
	</resultMap>
	
	<select id="findCurriculumById" resultMap="subjectMap">
		select c.id, c.curriculum_order, c.subject, d.curriculum_detail_order, d.detail
          from alz_curriculum c, alz_curriculum_detail d
         where c.id = d.curriculum_id
     		and c.lesson_id = #{id}
      order by c.curriculum_order, d.curriculum_detail_order
	</select>
	
	<select id="findTeacherById" resultType="alz.lesson.domain.TeacherDTO">
		select alz_teacher.id, alz_teacher.user_id userId, alz_teacher.nickname, alz_teacher.contact,
		       alz_teacher.profile, alz_teacher.sns_type snsType, alz_teacher.sns_id snsId, alz_teacher.sns_url snsUrl
		  from alz_lesson, alz_teacher
		 where alz_lesson.teacher_id = alz_teacher.id
		   and alz_lesson.id = #{id}
	</select>
	
	<select id="findQuickReviewById" resultType="alz.lesson.domain.QuickReviewDTO">
		select alz_lesson_quickreview.user_id userId, alz_lesson_quickreview.lesson_id lessonId, 
			   alz_lesson_quickreview.rate, alz_lesson_quickreview.content, alz_user.nickname
          from alz_lesson_quickreview, alz_user
         where alz_lesson_quickreview.user_id = alz_user.id
           and alz_lesson_quickreview.lesson_id = #{id}
	</select>
	
	<select id="findById" resultType="alz.lesson.domain.LessonResponseDTO">
		select lesson.id id, lesson.teacher_id teacherId, category.name categoryName, lesson.title,
		        lessonType.type lessonType, lessonLevel.lesson_level lessonLevel, lesson.min_student minStudent,
		        lesson.max_student maxStudent, lesson.current_student currentStudent, lessonState.state state,
		        schedule.open_at openAt, schedule.close_at closeAt, schedule.start_at startAt, schedule.end_at endAt,
		        detail.detail detail
		    from alz_lesson lesson, 
		         alz_lesson_type lessonType, 
		         alz_lesson_level lessonLevel,
		         alz_lesson_state lessonState,
		         alz_category category,
		         alz_lesson_schedule schedule,
		         alz_lesson_detail detail
		    where lesson.lesson_type = lessonType.id 
		      and lesson.lesson_level = lessonLevel.id
		      and lesson.state = lessonState.id
		      and lesson.category_id = category.id
		      and lesson.id = schedule.lesson_id
		      and lesson.id = detail.lesson_id
		      and lesson.id = #{id}
	</select>

	<select id="findAll" resultType="alz.lesson.domain.LessonDTO">
		select lesson.id id, lesson.teacher_id teacherId, category.name categoryName, lesson.title,
		    lessonType.type lessonType, lessonLevel.lesson_level lessonLevel, lesson.min_student minStudent,
		    lesson.max_student maxStudent, lesson.current_student currentStudent, lessonState.state state,
            schedule.open_at openAt, schedule.close_at closeAt, schedule.start_at startAt, schedule.end_at endAt
		from alz_lesson lesson, 
		     alz_lesson_type lessonType, 
		     alz_lesson_level lessonLevel,
		     alz_lesson_state lessonState,
             alz_category category,
             alz_lesson_schedule schedule
		where lesson.lesson_type = lessonType.id 
		  and lesson.lesson_level = lessonLevel.id
		  and lesson.state = lessonState.id
          and lesson.category_id = category.id
          and lesson.id = schedule.lesson_id
	</select>
	
	<insert id="insert" parameterType="alz.lesson.domain.LessonDTO">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			SELECT alz_LESSON_seq.nextval FROM dual
		</selectKey>
		INSERT INTO
		ALZ_LESSON(ID,NAME,DISCRIPTION,OPEN_AT,CLOSE_AT,START_AT,END_AT,
		STATE,CATEGORY_ID, TEACHER_ID)
		VALUES (#{id}, #{name}, #{discription},
		#{openAt}, #{closeAt}, #{startAt},
		#{endAt}, #{state}, #{categoryId},
		#{teacherId})
	</insert>
	
	<update id="updateById"
		parameterType="alz.lesson.domain.LessonDTO">
		UPDATE ALZ_LESSON
		SET name = #{name},
		discription =
		#{discription},
		open_at = #{openAt},
		close_at = #{closeAt},
		start_at =
		#{startAt},
		end_at = #{endAt},
		state = #{state},
		category_id =
		#{categoryId}
		WHERE id = #{id}
	</update>
	
	<delete id="deleteById">
		DELETE FROM ALZ_LESSON WHERE id = #{id}
	</delete>

</mapper>