<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
<mapper namespace="alz.board.mapper.BoardMapper">

	<sql id="boardCriteria">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach collection="typeArr" item='type'>
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'W'.toString()">
							writer like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>

	<select id="selectAll" resultType="alz.board.domain.BoardDTO">
		<![CDATA[
			select id, title, content, written_at writtenAt, updated_at updatedAt, like_cnt likeCnt, 
					comment_cnt commentCnt, view_cnt viewCnt, board_order boardOrder, nickname, 
					parent_id parentId, type_id typeId
			from alz_board 
			where id > 0
			
		]]>
	</select>
	
	<select id="selectWithPaging" resultType="alz.board.domain.BoardDTO">

 <![CDATA[
                                 
                                 
          select id, title, content, writtenAt, updatedAt, likeCnt, commentCnt, viewCnt,
               boardOrder, nickname, parentId, typeId  
            from (select rownum, rn, id, title, content, writtenAt, updatedAt, likeCnt, commentCnt, 
                         viewCnt, boardOrder, nickname, parentId, typeId 
                 from (select rownum rn, id, title, content, writtenAt, updatedAt, likeCnt, commentCnt, 
                            viewCnt, boardOrder, nickname, parentId, typeId
                        from (select id, title, content, written_at writtenAt, updated_at updatedAt, 
                                     like_cnt likeCnt, comment_cnt commentCnt, view_cnt viewCnt,
                                     board_order boardOrder, nickname, parent_id parentId, type_id typeId  
                               from alz_board
                         where type_id = #{typeId}
                         start with parent_id = 0
                         connect by prior id = parent_id
                              order siblings by boardOrder desc)
                     where rownum <= #{pageNum} * #{amount} )
			)
		where 		
		   	]]>
				<include refid="boardCriteria"></include>
       <![CDATA[ 
                      rn > (#{pageNum} -1) * #{amount}
		start with parentId = 0
		connect by prior id = parentId
		order siblings by boardOrder desc
	
		]]>	
	</select>

	<select id="selectById" resultType="alz.board.domain.BoardDTO">
		select id, title, content, written_at writtenAt, updated_at updatedAt, like_cnt likeCnt, comment_cnt commentCnt,
					view_cnt viewCnt, board_order boardOrder, nickname, parent_id parentId, type_id typeId
		from alz_board where id = #{id}
	</select>
	
	<select id="getTotalCount" resultType="int">
		select count(*)
		from alz_board
		where 
		<include refid="boardCriteria"></include>
			id > 0
	</select>

	<insert id="insert">
		
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_board_seq.nextval from dual
		</selectKey>
		
		insert into alz_board (id, title, content, nickname, type_id, parent_id, board_order)
		values (#{id}, #{title}, #{content}, #{nickname}, #{typeId}, '0', #{id})
		
		
	</insert>
	
	<insert id="replyInsert">
			<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_board_seq.nextval from dual	
			</selectKey>	
		insert into alz_board (id, title, content, nickname, type_id, parent_id, board_order)
		values (#{id}, #{title}, #{content}, #{nickname}, #{typeId}, #{boardOrder}, #{boardOrder})
		
	</insert>
	
		<insert id="rereplyInsert">
			<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_board_seq.nextval from dual	
			</selectKey>	
		insert into alz_board (id, title, content, nickname, type_id, parent_id, board_order)
		values (#{id}, #{title}, #{content}, #{nickname}, #{typeId}, #{parentId}, #{boardOrder})
		
	</insert>
	
	
	<update  id="insertReply" parameterType="alz.board.domain.BoardDTO">
	    update alz_board set title ='re :'||title where id=#{id} 
	</update>
	
	<delete id="deleteById">
		delete from alz_board where id = #{id}
	</delete>
	
	<update id="updateById" parameterType="alz.board.domain.BoardDTO">
		update alz_board
		set title = #{title},
			content = #{content},
			updated_at = sysdate
		where id = #{id}
	</update>



</mapper>
